name: CMake build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest] # [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc] # [gcc, clang, cl]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
        # exclude:
        #   - os: windows-latest
        #     c_compiler: gcc
        #   - os: windows-latest
        #     c_compiler: clang
        #   - os: ubuntu-latest
        #     c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libgl1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libglew-dev xvfb lcov
        version: 1.0

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "install-dir=${{ github.workspace }}/install" >> "$GITHUB_OUTPUT"
        echo "coverage-dir=${{ github.workspace }}/build/ccov/f2-doctest" >> "$GITHUB_OUTPUT"
        echo "coverage-info=${{ github.workspace}}/build/ccov/f2-doctest.info" >> "$GITHUB_OUTPUT"

    - name: Configure CMake for tests
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=Debug
        -DCODE_COVERAGE=ON
        -S ${{ github.workspace }}

    - name: Build and run tests
      run: xvfb-run cmake --build ${{ steps.strings.outputs.build-output-dir }} --target ccov-f2-doctest --config Debug

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ${{ steps.strings.outputs.coverage-dir }}

    - name: Extract coverage percentage
      id: extract
      run: >
        lcov --summary ${{ steps.strings.outputs.coverage-info }} | grep -oP 'lines\.*: \d+\.\d+%' | awk '{print "coverage="$2}' >> "$GITHUB_OUTPUT"

    - name: Extract coverage badge color
      id: badge
      run: >
        echo "color=${{ steps.extract.outputs.coverage }}" | awk -F "=" '{if (int($2) >= 90) print $1 "=green"; else if (int($2) >= 50) print $1 "=yellow"; else print $1 "=red" }' >> "$GITHUB_OUTPUT"

    - if: github.event_name == 'push' 
      name: Update coverage badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ba189ce4c9c4c4aa5f9441783a957161
        filename: coverage.json
        label: Coverage
        message: ${{ steps.extract.outputs.coverage }}
        color: ${{ steps.badge.outputs.color }}

    - name: Configure CMake for artifact
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Install
      # Copy compiled artifacts
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --prefix ${{ steps.strings.outputs.install-dir }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
        path: ${{ steps.strings.outputs.install-dir }}
